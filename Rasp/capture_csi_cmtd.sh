#!/bin/bash                         # usa o interpretador bash para executar este script

# Check if all parameters are provided
if [ $# -ne 5 ]; then               # Check if were passed exactly 5 parameters in command line
    echo "Usage: $0 <DELAY> <DURATION> <OUTPUT_FILE> <CHANNEL> <TX_POWER_dBm>"   # Correct usage
    echo "Example: $0 3 20 /path/to/output.pcap 36/80 15"                        # Example of call
    exit 1                          # It ends with error if the quantity isn't right
fi

# Parameters
DELAY=$1                            # Time (seconds) wait before to start
DURATION=$2                         # duration (seconds) of capture
OUTPUT_FILE=$3                      # output file '.pcap'
CHANNEL=$4                          # channel and bandwith e.g. "36/80" or "36/40" or "1/20"
TX_POWER=$5                         # power of transmission in dBm (integer), ex.: 15

# Generate CSI parameters string encoded in base64
CSI_PARAMS=$(/usr/local/bin/mcp -C 1 -N 1 -c $CHANNEL)     # Generates base64 string with CSI parameters for the firmware (via makecsiparams "mcp")
                                                           # -C 1 e -N 1: Default setup of chains/streams; -c $CHANNEL: channel/BW (e.g. 36/80)
echo "Generated CSI parameters string: $CSI_PARAMS"         # Displays the generated string on the screen

# Remove existing monitor interface
MON_INTERFACE="mon0"                 # name that will be used for the monitor mode interface
if /usr/sbin/iw dev | grep -q $MON_INTERFACE; then         # if an interface named "mon0" already exists...
    echo "Removing monitor interface $MON_INTERFACE..."    # warns that it will be removed
    sudo /usr/sbin/iw dev $MON_INTERFACE del               # removes the old monitor interface to avoid conflicts
fi

# Reinitialize Wi-Fi driver
echo "Reinitializing Wi-Fi driver..."                      # reinitializes the Wi-Fi driver to ensure a clean state
sudo /sbin/modprobe -r brcmfmac                            # unloads the Broadcom driver module (brcmfmac)
sleep 1                                                    # small pause for the system to apply the removal
sudo /sbin/modprobe brcmfmac                               # reloads the driver module

# Pause briefly to ensure the driver is reinitialized
sleep 1                                                    # another small pause for safety

# Configure wlan0 interface
sudo /sbin/ifconfig wlan0 up                               # ensures the wlan0 interface is "UP" (active)

# Configure Wi-Fi interface with nexutil
sudo /usr/local/bin/nexutil -Iwlan0 -s500 -b -l34 -v$CSI_PARAMS
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# -I wlan0     : selects the target interface
# -s500        : enables/configures CSI mode in the firmware (default value used by Nexmon)
# -b           : enables binary output from the firmware for CSI packets
# -l34         : length of the Nexmon-CSI header (34 bytes)
# -v$CSI_PARAMS: injects the base64 string generated by "mcp" with channel/width and other parameters into the firmware

# Add and configure monitor interface
echo "Adding monitor interface $MON_INTERFACE..."          # informs that it will create the monitor interface
sudo /usr/sbin/iw dev wlan0 interface add $MON_INTERFACE type monitor
# creates an additional monitor interface (mon0) based on the wlan0 device.
# In monitor mode, you can sniff raw 802.11 frames if you need to.

# Ensure monitor interface is active
sudo /sbin/ip link set $MON_INTERFACE up                   # brings the mon0 interface "up" (activates it)

# Verify monitor interface creation
if ! /usr/sbin/iw dev | grep -q $MON_INTERFACE; then      # checks if mon0 was actually created
    echo "Error: Failed to create monitor interface $MON_INTERFACE."
    exit 1                                                 # aborts if the monitor interface does not exist
fi

# Set the transmit power
echo "Setting transmit power to $TX_POWER dBm..."          # informs the power that will be configured
sudo iw dev wlan0 set txpower fixed ${TX_POWER}00          # sets fixed txpower in mBm (dBm*100). Ex: 15 dBm => 1500 mBm
# NOTE: some countries/regulations may prevent higher powers; the driver can adjust automatically.

# Pause for a specific delay before starting capture
echo "Waiting $DELAY seconds before starting capture..."   # intentional wait for you to prepare/start traffic
sleep $DELAY                                              # pause before starting the capture

# Play sound to indicate the start of the capture
#play -nq -t alsa synth 0.5 sine 440                      # optional: start "beep" (commented out)

# Capture packets with tcpdump for a specific duration using wlan0 interface
echo "Starting capture for $DURATION seconds on wlan0 interface..."  # informs the start of the timed capture
sudo timeout $DURATION tcpdump -i wlan0 dst port 5500 -vv -w $OUTPUT_FILE
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# uses "timeout" to limit the duration
# tcpdump -i wlan0             : captures on the wlan0 interface (Nexmon CSI packets arrive via UDP on the IP stack)
# dst port 5500                : filters only for UDP packets destined for port 5500 (where the firmware delivers the CSI)
# -vv                          : extra verbosity (useful when viewing in the terminal; here it goes directly to the .pcap file)
# -w $OUTPUT_FILE              : saves the capture to the specified file (PCAP format)

# Play sound to indicate the end of the capture
#play -nq -t alsa synth 0.5 sine 880                      # optional: end "beep" (commented out)

# Verify if packets were captured
PACKET_COUNT=$(tcpdump -r $OUTPUT_FILE | wc -l)            # reopens the .pcap and counts how many lines/packets there are
if [ $PACKET_COUNT -eq 0 ]; then                           # if there are no packets...
    echo "Warning: No packets captured. Check channel configuration and network traffic presence."
else
    echo "Capture complete. File saved as $OUTPUT_FILE with $PACKET_COUNT packets."
fi

